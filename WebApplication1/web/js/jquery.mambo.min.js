/*
 * Mambo jQuery Plugin
 * @author: Valerio Barrila aka NinjaTux
 * @twitter: ninjatux2k
 */!function (a) {
    "use strict";
    function i(b, c) {
        this.element = b, this.options = a.extend(!0, {}, f, c), this._defaults = f, this._name = e, this.init()
    }
    var e = "mambo", f = {percentage: 100, circleColor: "#F2AC29", circleBorder: "#FFF", ringStyle: "percentage", ringColor: "#F2762E", ringBackground: "#CCC", labelColor: "#FFF", displayValue: !0, drawShadow: !1}, g = Math.PI / 180, h = 2 * Math.PI;
    i.prototype = {init: function () {
            this.checkCanvas() && (this.context = this.element.getContext("2d"), this.percentage = 3.6 * this.options.percentage, this.points = this.getPoints(), a(this.element).css({width: this.points.width + "px", height: this.points.width + "px"}), this.linesAndRadiuses = this.getLinesAndRadiuses(), this.options.percentage > 0 && this.drawPercentage(), "full" === this.options.ringStyle && 360 !== this.percentage && this.drawExtraPercentage(), this.drawInternalCircle(), this.options.drawShadow && this.drawShadow(), this.options.image ? this.drawImage() : this.drawText())
        }, drawInternalCircle: function () {
            this.context.beginPath(), this.context.moveTo(this.points.x, this.points.x), this.context.arc(this.points.x, this.points.x, this.linesAndRadiuses.internalRadius, 0, h, !1), this.context.fillStyle = this.options.circleColor, this.context.lineWidth = this.linesAndRadiuses.internalLine, this.context.closePath(), this.context.strokeStyle = this.options.circleBorder, this.context.stroke(), this.context.fill()
        }, drawPercentage: function () {
            this.context.beginPath(), this.context.moveTo(this.points.x, this.points.x), this.context.arc(this.points.x, this.points.x, this.linesAndRadiuses.externalRadius, this.points.angle.start, this.points.angle.end, !1), this.context.closePath(), this.context.fillStyle = this.options.ringColor, this.context.fill()
        }, drawExtraPercentage: function () {
            this.context.beginPath(), this.context.moveTo(this.points.x, this.points.x), this.context.arc(this.points.x, this.points.x, this.linesAndRadiuses.externalRadius, this.points.angle.start, this.points.angle.end, !0), this.context.closePath(), this.context.fillStyle = this.options.ringBackground, this.context.fill()
        }, drawShadow: function () {
            this.context.beginPath(), this.context.arc(this.points.x, this.points.x, this.linesAndRadiuses.shadowRadius, 0, h, !1), this.context.shadowColor = "#cbcbcb", this.context.lineWidth = this.linesAndRadiuses.shadowLine, this.context.strokeStyle = "rgba(255,255,255, 0.3)", this.context.stroke()
        }, drawImage: function () {
            var c, d, e, a = (this.linesAndRadiuses.internalRadius - this.linesAndRadiuses.internalLine) * Math.sqrt(2), b = new Image, f = this;
            b.src = this.options.image, b.onload = function () {
                e = b.height / b.width, b.width > a && 1 >= e ? (c = a, d = Math.round(c * e)) : b.height > a ? (d = a, c = Math.round(d / e)) : c = d = a, f.context.drawImage(b, (f.points.width - c) / 2, (f.points.width - d) / 2, c, d)
            }
        }, drawText: function () {
            var a;
            this.context.textAlign = "center", this.context.fillStyle = this.options.labelColor, this.context.textBaseline = "bottom", this.options.displayValue ? (a = this.points.width / 3.5, this.context.font = "bold " + a + "px helvetica", this.options.label && this.options.label.length > 0 ? (this.context.fillText(this.options.label, this.points.x, this.points.x + this.linesAndRadiuses.internalRadius / 25), this.context.fillText(this.options.percentage + "%", this.points.x, this.points.x + this.linesAndRadiuses.internalRadius / 1.5)) : this.context.fillText(this.options.percentage + "%", this.points.x, this.points.x + this.linesAndRadiuses.internalRadius / 2.3)) : (a = this.points.width / 2.5, this.context.font = "bold " + a + "px helvetica", this.context.fillText(this.options.label, this.points.x, this.points.x + this.linesAndRadiuses.internalRadius / 1.8))
        }, checkCanvas: function () {
            return!(!this.element.getContext || !this.element.getContext("2d"))
        }, getPoints: function () {
            return{width: this.element.width, x: this.element.width / 2, angle: {start: 360 === this.percentage ? 0 : 270 * g, end: 360 === this.percentage ? h : (this.percentage - 90) * g}}
        }, getLinesAndRadiuses: function () {
            var a = this.points.width / 30, b = this.points.x - a / 2, c = b, d = this.points.width / 35, e = .8 * c;
            return{shadowLine: a, shadowRadius: b, externalRadius: c, internalLine: d, internalRadius: e}
        }}, a.fn[e] = function (b) {
        return this.each(function () {
            a.data(this, "plugin_" + e) || a.data(this, "plugin_" + e, new i(this, b))
        })
    }
}(jQuery, window, document);